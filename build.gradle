plugins {
    id 'java'
    id 'idea'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'com.vanniktech.dependency.graph.generator' version '0.5.0'
    id 'pl.allegro.tech.build.axion-release' version '1.11.0'
    id 'com.jfrog.artifactory' version '4.13.0'
    id 'com.jfrog.bintray' version '1.8.4'
}

scmVersion {
    versionCreator 'versionWithBranch'
    tag {
        prefix = 'verification-context'
    }
}
project.version = scmVersion.version

allprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    group 'com.github.michaelruocco'

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = '0.8.5'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.diffplug.gradle.spotless'

    version = rootProject.version
    archivesBaseName = "${rootProject.name}-${project.name}"

    sourceCompatibility = 11
    targetCompatibility = 11

    ext {
        junitVersion = '5.6.0'
        lombokVersion = '1.18.12'
        slf4jVersion = '1.7.30'
        meanBeanVersion = '2.0.3'
        equalsVerifierVersion = '3.1.12'
        fileLoaderVersion = '5.0.1'
        testContainersVersion = '1.12.5'
        jsonUnitVersion = '2.14.0'
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testCompile 'org.assertj:assertj-core:3.15.0'
        testCompile 'org.mockito:mockito-core:3.3.0'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }

    spotless {
        java {
            removeUnusedImports()
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()

            replace 'Not enough space after if', 'if(', 'if ('
            replaceRegex 'Too much space after if', 'if +\\(', 'if ('

            replace 'Not enough space after for', 'for(', 'for ('
            replaceRegex 'Too much space after for', 'for +\\(', 'for ('

            replace 'Not enough space after while', 'while(', 'while ('
            replaceRegex 'Too much space after while', 'while +\\(', 'while ('
        }
    }

}

def publishProjectNames = [
        'client'
]
allprojects.findAll { it.name in publishProjectNames }.each { publishProject ->
    configure(publishProject) {
        apply plugin: 'maven-publish'
        apply plugin: 'com.jfrog.artifactory'
        apply plugin: 'com.jfrog.bintray'

        task sourcesJar(type: Jar, dependsOn: classes) {
            from sourceSets.main.allSource
        }

        //required due to issues with annotation processors not being invoked in javadoc stage which causes build failures
        //https://github.com/rzwitserloot/lombok/issues/2137
        javadoc.failOnError = false
        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }

        def pomConfig = {
            licenses {
                license {
                    name 'BSD License'
                    url 'http://www.opensource.org/licenses/bsd-license.php'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'mruoc'
                    name 'Michael Ruocco'
                    email 'michael.ruocco@hotmail.com'
                }
            }

            scm {
                url 'https://github.com/michaelruocco/verification-context'
            }
        }

        publishing {
            publications {
                mavenPublication(MavenPublication) {
                    from components.java
                    artifact sourcesJar {
                        classifier "sources"
                    }
                    artifact javadocJar {
                        classifier "javadoc"
                    }
                    groupId project.group
                    artifactId archivesBaseName
                    version project.version
                    pom.withXml {
                        def root = asNode()
                        root.appendNode('name', archivesBaseName)
                        root.appendNode('url', 'https://github.com/michaelruocco/verification-context')
                        root.children().last() + pomConfig
                    }
                }
            }
        }

        bintray {
            user = System.getenv('BINTRAY_USER')
            key = System.getenv('BINTRAY_KEY')
            publications = ['mavenPublication']
            publish = true
            override = true

            pkg {
                repo = 'maven'
                name = archivesBaseName
                userOrg = 'michaelruocco'
                licenses = ['bsd']
                vcsUrl = 'https://github.com/michaelruocco/verification-context.git'
                version {
                    name = project.version
                    desc = project.version
                    released = new Date()
                    gpg {
                        sign = true
                    }
                    mavenCentralSync {
                        sync = true
                    }
                }
            }
        }

        artifactory {
            contextUrl = 'http://oss.jfrog.org'
            publish {
                repository {
                    repoKey = 'oss-snapshot-local'
                    username = System.getenv('BINTRAY_USER')
                    password = System.getenv('BINTRAY_KEY')
                }
                defaults {
                    publications('mavenPublication')
                    publishArtifacts = true
                    publishPom = true
                }
            }
            resolve {
                repoKey = 'jcenter'
            }
            clientConfig.info.setBuildNumber(System.getProperty('build.number'))
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
    subprojects.findAll { it.tasks.findByName('integrationTest') != null }.integrationTest
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorExtension.Generator

def idvGenerator = new Generator(
        "idv",
        { dependency -> dependency.getModuleGroup().startsWith("com.github.michaelruocco") },
        { dependency -> true }
)

dependencyGraphGenerator {
    generators = [Generator.ALL, idvGenerator]
}