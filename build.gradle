plugins {
    id 'java'
    id 'com.diffplug.gradle.spotless' version '3.25.0'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    repositories {
        mavenCentral()
        maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
    }

    jacoco {
        toolVersion = '0.8.3'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.diffplug.gradle.spotless'

    group 'uk.co.mruoc'
    version '1.0.0-SNAPSHOT'

    sourceCompatibility = 11
    targetCompatibility = 11

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

        compileOnly 'org.projectlombok:lombok:1.18.10'
        testCompileOnly 'org.projectlombok:lombok:1.18.10'
        annotationProcessor 'org.projectlombok:lombok:1.18.10'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'

        compile 'org.apache.commons:commons-lang3:3.9'
        compile 'org.javamoney:moneta:1.3'
        compile 'org.zalando:jackson-datatype-money:1.1.1'
        compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.0'
        compile 'org.apache.commons:commons-collections4:4.4'
        compile 'com.github.michaelruocco:jackson-json-api:2.0.2'

        testCompile 'org.assertj:assertj-core:3.14.0'
        testCompile 'nl.jqno.equalsverifier:equalsverifier:3.1.10'
        testCompile 'com.github.michaelruocco:file-loader:5.0.1'
        testCompile 'net.javacrumbs.json-unit:json-unit-assertj:2.10.0'

        testCompile('org.mockito:mockito-core:3.1.0') {
            // mockito 3 is failing with version of byte buddy it brings automatically?!
            // this line excludes it and then latest version is included below
            exclude group: 'net.bytebuddy'
        }
        testCompile 'net.bytebuddy:byte-buddy:1.10.2'
    }

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    spotless {
        java {
            removeUnusedImports()
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()

            replace 'Not enough space after if', 'if(', 'if ('
            replaceRegex 'Too much space after if', 'if +\\(', 'if ('

            replace 'Not enough space after for', 'for(', 'for ('
            replaceRegex 'Too much space after for', 'for +\\(', 'for ('

            replace 'Not enough space after while', 'while(', 'while ('
            replaceRegex 'Too much space after while', 'while +\\(', 'while ('
        }
    }
}

jacoco {
    toolVersion = '0.8.5'
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test

    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    dependsOn jacocoRootReport
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}